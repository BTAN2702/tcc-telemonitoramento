import streamlit as st
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
import io
from fpdf import FPDF
import base64

st.set_page_config(page_title="Telemonitoramento CEUB", layout="wide")

# --- Autentica√ß√£o simples ---
if "autenticado" not in st.session_state:
    st.session_state.autenticado = False

if not st.session_state.autenticado:
    st.title("üîê Login - Telemonitoramento CEUB")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        if usuario == "admin" and senha == "1234":
            st.session_state.autenticado = True
            st.experimental_rerun()
        else:
            st.error("Usu√°rio ou senha incorretos.")
    st.stop()

# --- Banco de dados em sess√£o ---
if 'pacientes' not in st.session_state:
    st.session_state.pacientes = []

if 'registros' not in st.session_state:
    st.session_state.registros = []

# --- Menu ---
menu = st.sidebar.radio("Menu", [
    "Cadastro de Paciente",
    "Registro Cl√≠nico",
    "Painel de Monitoramento",
    "Gr√°ficos de Evolu√ß√£o",
    "Gerar Relat√≥rio PDF"
])

# --- Cadastro de paciente ---
if menu == "Cadastro de Paciente":
    st.title("Cadastro de Paciente")
    with st.form("form_cadastro"):
        nome = st.text_input("Nome do Paciente")
        idade = st.number_input("Idade", min_value=0)
        sexo = st.selectbox("Sexo", ["Feminino", "Masculino", "Outro"])
        contato = st.text_input("Telefone/Contato")
        email = st.text_input("E-mail")
        encaminhamento = st.text_area("Encaminhamento / Observa√ß√µes")
        enviar = st.form_submit_button("Salvar Paciente")

        if enviar:
            st.session_state.pacientes.append({
                "Nome": nome, "Idade": idade, "Sexo": sexo,
                "Contato": contato, "Email": email,
                "Encaminhamento": encaminhamento
            })
            st.success("Paciente cadastrado com sucesso!")

    if st.session_state.pacientes:
        st.subheader("Pacientes Cadastrados")
        st.dataframe(pd.DataFrame(st.session_state.pacientes))

# --- Registro Cl√≠nico ---
elif menu == "Registro Cl√≠nico":
    st.title("Registro de Indicadores Cl√≠nicos")
    if not st.session_state.pacientes:
        st.warning("Cadastre ao menos um paciente antes de registrar indicadores.")
    else:
        nomes = [p["Nome"] for p in st.session_state.pacientes]
        with st.form("form_registro"):
            paciente = st.selectbox("Selecionar Paciente", nomes)
            data = st.date_input("Data da Avalia√ß√£o", value=datetime.today())
            pa = st.text_input("Press√£o Arterial (mmHg)")
            glicemia = st.number_input("Glicemia (mg/dL)", min_value=0.0)
            fc = st.number_input("Frequ√™ncia Card√≠aca (bpm)", min_value=0.0)
            spo2 = st.number_input("Satura√ß√£o O2 (%)", min_value=0.0, max_value=100.0)
            temperatura = st.number_input("Temperatura (¬∞C)", min_value=30.0, max_value=43.0)
            sintomas = st.text_area("Relato de sintomas")
            adesao = st.selectbox("Ades√£o ao Tratamento", ["Sim", "N√£o"])
            proxima_visita = st.date_input("Pr√≥xima visita sugerida")
            salvar = st.form_submit_button("Salvar Registro")

            if salvar:
                st.session_state.registros.append({
                    "Paciente": paciente,
                    "Data": data,
                    "Press√£o": pa,
                    "Glicemia": glicemia,
                    "Frequ√™ncia": fc,
                    "Satura√ß√£o": spo2,
                    "Temperatura": temperatura,
                    "Sintomas": sintomas,
                    "Ades√£o": adesao,
                    "Pr√≥xima Visita": proxima_visita
                })
                st.success("Registro salvo com sucesso!")

# --- Painel de Monitoramento ---
elif menu == "Painel de Monitoramento":
    st.title("Painel de Monitoramento")
    if not st.session_state.registros:
        st.warning("Nenhum dado registrado ainda.")
    else:
        df = pd.DataFrame(st.session_state.registros)
        paciente_filtro = st.selectbox("Filtrar por paciente", ["Todos"] + df["Paciente"].unique().tolist())
        if paciente_filtro != "Todos":
            df = df[df["Paciente"] == paciente_filtro]
        st.dataframe(df)

        st.subheader("Alertas Cl√≠nicos")
        alertas = df[(df["Satura√ß√£o"] < 90) | (df["Glicemia"] > 300)]
        if not alertas.empty:
            st.error("Aten√ß√£o: Pacientes com indicadores cr√≠ticos:")
            st.dataframe(alertas)
        else:
            st.success("Nenhum alerta cr√≠tico encontrado.")

        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button("üì• Baixar dados em CSV", data=csv, file_name="monitoramento_clinico.csv", mime='text/csv')

# --- Gr√°ficos de evolu√ß√£o ---
elif menu == "Gr√°ficos de Evolu√ß√£o":
    st.title("Gr√°ficos de Evolu√ß√£o Cl√≠nica")
    if not st.session_state.registros:
        st.warning("Nenhum dado registrado ainda.")
    else:
        df = pd.DataFrame(st.session_state.registros)
        paciente = st.selectbox("Selecione o paciente para visualizar evolu√ß√£o", df["Paciente"].unique())
        df_paciente = df[df["Paciente"] == paciente].sort_values("Data")
        df_paciente["Data"] = pd.to_datetime(df_paciente["Data"])

        col1, col2 = st.columns(2)
        with col1:
            st.line_chart(df_paciente.set_index("Data")["Glicemia"])
            st.line_chart(df_paciente.set_index("Data")["Temperatura"])
        with col2:
            st.line_chart(df_paciente.set_index("Data")["Frequ√™ncia"])
            st.line_chart(df_paciente.set_index("Data")["Satura√ß√£o"])

# --- Gerar PDF ---
elif menu == "Gerar Relat√≥rio PDF":
    st.title("üìÑ Gerar Relat√≥rio em PDF")
    if not st.session_state.registros:
        st.warning("Nenhum dado registrado.")
    else:
        df = pd.DataFrame(st.session_state.registros)
        pacientes = df["Paciente"].unique().tolist()
        escolhido = st.selectbox("Escolha o paciente para gerar o PDF", pacientes)
        dados = df[df["Paciente"] == escolhido]

        if st.button("Gerar PDF"):
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt=f"Relat√≥rio de {escolhido}", ln=True, align="C")

            for index, row in dados.iterrows():
                pdf.cell(200, 10, txt=f"Data: {row['Data']} - PA: {row['Press√£o']} - Glicemia: {row['Glicemia']} - FC: {row['Frequ√™ncia']} - SpO2: {row['Satura√ß√£o']} - Temp: {row['Temperatura']} - Ades√£o: {row['Ades√£o']}", ln=True)
               pdf.multi_cell(200, 10, txt=f"Sintomas: {row['Sintomas']}\n\n")

            buffer = io.BytesIO()
            pdf.output(buffer)
            b64 = base64.b64encode(buffer.getvalue()).decode()
            href = f'<a href="data:application/octet-stream;base64,{b64}" download="relatorio_{escolhido}.pdf">üì• Clique aqui para baixar o PDF</a>'
            st.markdown(href, unsafe_allow_html=True)
